package com.example.verifiserer.controller;

import com.example.verifiserer.service.ResponseService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.Collections;
import java.util.List;

@RestController
@RequestMapping("/api/verifisere")
public class ResponseController {

    String test = "presentation_submission=%7B%22id%22%3A%22F515D2E7-607F-4162-8091-0CE0052CA28B%22%2C%22descriptor_map%22%3A%5B%7B%22path_nested%22%3A%7B%22path%22%3A%22%24.vp.verifiableCredential%5B0%5D%22%2C%22id%22%3A%2289b67e0f-c6f4-4d3c-b893-27d1b097c346%22%2C%22format%22%3A%22jwt_vc%22%7D%2C%22id%22%3A%2289b67e0f-c6f4-4d3c-b893-27d1b097c346%22%2C%22path%22%3A%22%24%22%2C%22format%22%3A%22%22%7D%2C%7B%22path%22%3A%22%24%22%2C%22id%22%3A%22356afd9b-b505-453b-98f0-e470d1814752%22%2C%22path_nested%22%3A%7B%22id%22%3A%22356afd9b-b505-453b-98f0-e470d1814752%22%2C%22path%22%3A%22%24.vp.verifiableCredential%5B1%5D%22%2C%22format%22%3A%22jwt_vc%22%7D%2C%22format%22%3A%22%22%7D%5D%2C%22definition_id%22%3A%22d7c8d84b-fa5a-4270-842c-f5af34ed5ddf%22%7D&state=20f93fb7-3121-41b4-bcc7-f9a9d3a673f9&vp_token=eyJraWQiOiJkaWQ6a2V5OnoyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnFDbVc3elRSWFlQZVlWQXpSZUJhVW9CQ3IzaTc0NVozVmRvWjRudnVIY1FjOFhmUDlDUU5xV3FIQm1hdG9xWWVUOEVWZGRwWWd6cWtyZFZvUG1SZmtUeVR2anRWRldDTXlwV1JTUXp2OGZxYUMzQnJ0dURydHEzVjM2cU40eXJqZGUjejJkbXpEODFjZ1B4OFZraTdKYnV1TW1GWXJXUGdZb3l0eWtVWjNleXFodDFqOUticUNtVzd6VFJYWVBlWVZBelJlQmFVb0JDcjNpNzQ1WjNWZG9aNG52dUhjUWM4WGZQOUNRTnFXcUhCbWF0b3FZZVQ4RVZkZHBZZ3pxa3JkVm9QbVJma1R5VHZqdFZGV0NNeXBXUlNRenY4ZnFhQzNCcnR1RHJ0cTNWMzZxTjR5cmpkZSIsImFsZyI6IkVTMjU2IiwidHlwIjoiSldUIiwiandrIjp7IngiOiJCRTIwSlNPbDNlbmtZNlI3dkdRcFBqa3haUHRHU3hnODVCS2tnOVdWRnFFIiwia3R5IjoiRUMiLCJ5IjoickJMQ0NnRW5XMHVQczA3TmFhTFhqUlJnSmxpOHV5SXJDNnFwOS1odHZnSTgiLCJjcnYiOiJQLTI1NiJ9fQ.eyJqdGkiOiJ1cm46dXVpZDo0OTBFOUY0QS0zMENGLTQ2QkYtQkMxNS1EQkE3MTNFNzI1QjAiLCJuYmYiOjE3NDEyNTcwMDMsImF1ZCI6Imh0dHBzOi8vcG9pcm90LmlkIiwiaXNzIjoiZGlkOmtleTp6MmRtekQ4MWNnUHg4VmtpN0pidXVNbUZZcldQZ1lveXR5a1VaM2V5cWh0MWo5S2JxQ21XN3pUUlhZUGVZVkF6UmVCYVVvQkNyM2k3NDVaM1Zkb1o0bnZ1SGNRYzhYZlA5Q1FOcVdxSEJtYXRvcVllVDhFVmRkcFlnenFrcmRWb1BtUmZrVHlUdmp0VkZXQ015cFdSU1F6djhmcWFDM0JydHVEcnRxM1YzNnFONHlyamRlIiwiZXhwIjoxNzQxMjYwNjAzLCJpYXQiOjE3NDEyNTcwMDMsInN1YiI6ImRpZDprZXk6ejJkbXpEODFjZ1B4OFZraTdKYnV1TW1GWXJXUGdZb3l0eWtVWjNleXFodDFqOUticUNtVzd6VFJYWVBlWVZBelJlQmFVb0JDcjNpNzQ1WjNWZG9aNG52dUhjUWM4WGZQOUNRTnFXcUhCbWF0b3FZZVQ4RVZkZHBZZ3pxa3JkVm9QbVJma1R5VHZqdFZGV0NNeXBXUlNRenY4ZnFhQzNCcnR1RHJ0cTNWMzZxTjR5cmpkZSIsIm5vbmNlIjoiYjMyNGYwNjYtNzIwOS00NDM0LWJlYWItOGQ5ZDRmYmQ3OTNmIiwidnAiOnsiaWQiOiJ1cm46dXVpZDo0OTBFOUY0QS0zMENGLTQ2QkYtQkMxNS1EQkE3MTNFNzI1QjAiLCJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ0eXBlIjpbIlZlcmlmaWFibGVQcmVzZW50YXRpb24iXSwiaG9sZGVyIjoiZGlkOmtleTp6MmRtekQ4MWNnUHg4VmtpN0pidXVNbUZZcldQZ1lveXR5a1VaM2V5cWh0MWo5S2JxQ21XN3pUUlhZUGVZVkF6UmVCYVVvQkNyM2k3NDVaM1Zkb1o0bnZ1SGNRYzhYZlA5Q1FOcVdxSEJtYXRvcVllVDhFVmRkcFlnenFrcmRWb1BtUmZrVHlUdmp0VkZXQ015cFdSU1F6djhmcWFDM0JydHVEcnRxM1YzNnFONHlyamRlIiwidmVyaWZpYWJsZUNyZWRlbnRpYWwiOlsiZXlKcmFXUWlPaUl5VUVKTmJXWXhjMlZFYURFemFEUlBkWGhzZEY5UVZrSTFaWEUxZFZjMmFYWnJZMkZHZUdSVk5uRk5JaXdpZEhsd0lqb2lTbGRVSWl3aVlXeG5Jam9pUlZNeU5UWWlMQ0pxZDJzaU9uc2lhM1I1SWpvaVJVTWlMQ0pqY25ZaU9pSlFMVEkxTmlJc0luZ2lPaUpqTVZvNU5VOW5VMkZ0TUMxME0ySnhaak5JZG1kbWRHZHFNVEp0Tlc1TE9XTkxYMUJOVlRFMloyUlpJaXdpZVNJNklrOVRkbGxMWmpKa2Nra3hlWG96UnkxeWIxTlJkVWgzWDJ0c2RHRXRaRFJ3T0hGT1F6WnZYMlpJWkVVaWZYMC5leUpwYzNNaU9pSm9kSFJ3Y3pvdkwzQnliM1J2ZEhsd1pTMXNiMjFwYm04dGFYTnpkV1Z5TG1GNmRYSmxkMlZpYzJsMFpYTXVibVYwTDI5d1pXNXBaQzlrY21GbWRGOHhOQ0lzSW5OMVlpSTZJbVJwWkRwclpYazZlakprYlhwRU9ERmpaMUI0T0ZacmFUZEtZblYxVFcxR1dYSlhVR2RaYjNsMGVXdFZXak5sZVhGb2RERnFPVXRpY1VOdFZ6ZDZWRkpZV1ZCbFdWWkJlbEpsUW1GVmIwSkRjak5wTnpRMVdqTldaRzlhTkc1MmRVaGpVV000V0daUU9VTlJUbkZYY1VoQ2JXRjBiM0ZaWlZRNFJWWmtaSEJaWjNweGEzSmtWbTlRYlZKbWExUjVWSFpxZEZaR1YwTk5lWEJYVWxOUmVuWTRabkZoUXpOQ2NuUjFSSEowY1ROV016WnhUalI1Y21wa1pTSXNJblpqSWpwN0luUjVjR1VpT2xzaVZtVnlhV1pwWVdKc1pVTnlaV1JsYm5ScFlXd2lMQ0oyYVhSdVpXMWhiQ0pkTENKamNtVmtaVzUwYVdGc1UzVmlhbVZqZENJNmV5SnBaQ0k2SW1ScFpEcHJaWGs2ZWpKa2JYcEVPREZqWjFCNE9GWnJhVGRLWW5WMVRXMUdXWEpYVUdkWmIzbDBlV3RWV2pObGVYRm9kREZxT1V0aWNVTnRWemQ2VkZKWVdWQmxXVlpCZWxKbFFtRlZiMEpEY2pOcE56UTFXak5XWkc5YU5HNTJkVWhqVVdNNFdHWlFPVU5SVG5GWGNVaENiV0YwYjNGWlpWUTRSVlprWkhCWlozcHhhM0prVm05UWJWSm1hMVI1VkhacWRGWkdWME5OZVhCWFVsTlJlblk0Wm5GaFF6TkNjblIxUkhKMGNUTldNelp4VGpSNWNtcGtaU0lzSWw5elpDSTZXeUpVZUZkWWVqWTFlV2w0VkRsV1IxTm9ZVE55TlZCd1pEVnRWM0ZPUkdWcFUzbHdTVGhEVjFsSFpHTnJJaXdpZWxWS1prWldRVzloWTNnMGVWWmlSMm80VVVkRGR6UkxlRk5ETXpZdFVXVmFOMXBFYVhSWmNXTlFNQ0lzSW5kU1VubEJibUo1WkMxTlVtSnRTaTF0U0hwWFpuZFFlR0ZLYUhBMU1YcDNRVzlwYW1oaGExOUxabFVpTENKbFZtdGtTM0pFWVZSR2VXbFVkak16ZFZKQmRIRm9WREZoTUVSTlNuUkRaMFZqTldRMWNtRk1TVzl2SWl3aVZUUnBSRGx0YWxkRFUzTnVOR1JhTkhjNE0waFBaazVKVUVaMmFsZERVVjkyZVZGUFdsVTBTWFk0T0NJc0lqTnJlV04yVFZCbVUxUjVVa3B1YmtnMU5VVndZMFp5YVdzNU9WbGhaekp2T1RWak0ySnBSMmR1U204aUxDSm1Xa2xMVkdOcGRrVlhNVTl1WVc1RVNqZzBZbWhuY0VSeExUVlJRMlp5UTJoZmFFNDRhRmx6T1V4Tklpd2lXRVJwU2paNmVuRTFWR1Z4VURadk5UUndUVXRJVm5KSE16TkdYMDlJYzFoWVpFMVFNa2htVGxKc2R5SXNJa0ZOVEVoMWVrcHNVRFphZFRaeFdGWndZMWR6ZDFKaU1YbG5ZMVpwZHpjeVJHWXhiV3hmTlhkeVJHc2lYWDBzSW1sa0lqb2lkWEp1T25WMWFXUTZNV0ptT0RVMFpqTXRabUl6TmkwMFltSmtMVGszWmpndE56RXhaalZrTVdNeU5XWTBJaXdpYVhOemRXVnlJanA3SW1sa0lqb2laR2xrT25kbFlqcHdjbTkwYjNSNWNHVXRiRzl0YVc1dkxXbHpjM1ZsY2k1aGVuVnlaWGRsWW5OcGRHVnpMbTVsZERwa1lUQmlZMkV4WkNJc0ltNWhiV1VpT2lKQ1lXTm9aV3h2Y25CeWIzTnFaV3QwSW4wc0luWmhiR2xrUm5KdmJTSTZJakl3TWpVdE1ETXRNRFJVTURnNk16ZzZORFV1TnpreU1Ea3hORFV5V2lJc0luWmhiR2xrVlc1MGFXd2lPaUl5TURJMUxUQXpMVEEyVkRBNE9qTTRPalExTGpjNU1qRXdNamMxTWxvaUxDSmpjbVZrWlc1MGFXRnNRbkpoYm1ScGJtY2lPbnNpWW1GamEyZHliM1Z1WkVOdmJHOXlJam9pSXpGa016VmlOU0lzSW14dloyOVZjbXdpT2lKb2RIUndjem92TDJWNFlXMXdiR1V1WTI5dEwyeHZaMjh1Y0c1bkluMHNJbTVoYldVaU9pSldhWFJ1WlcxaGJDSXNJbVJsYzJOeWFYQjBhVzl1SWpvaVpHbG5kR0ZzZG1sMGJtVnRZV3dpZlN3aVkyNW1JanA3SW1wM2F5STZleUpyZEhraU9pSkZReUlzSW1OeWRpSTZJbEF0TWpVMklpd2llQ0k2SW1NeFdqazFUMmRUWVcwd0xYUXpZbkZtTTBoMloyWjBaMm94TW0wMWJrczVZMHRmVUUxVk1UWm5aRmtpTENKNUlqb2lUMU4yV1V0bU1tUnlTVEY1ZWpOSExYSnZVMUYxU0hkZmEyeDBZUzFrTkhBNGNVNURObTlmWmtoa1JTSjlmWDAuRWxNaU5LODFfNHFMeGJyTGtKb2xKcjBWZUhZZU5kUXVjZ3lFQlU3QlRKUFc3QzJFejdPY0ZPMEdCa3ZrbFIwalB5eWdhV2FuUERZWkFUT3ExdXVXM1EiLCJleUpyYVdRaU9pSXlVRUpOYldZeGMyVkVhREV6YURSUGRYaHNkRjlRVmtJMVpYRTFkVmMyYVhaclkyRkdlR1JWTm5GTklpd2lkSGx3SWpvaVNsZFVJaXdpWVd4bklqb2lSVk15TlRZaUxDSnFkMnNpT25zaWEzUjVJam9pUlVNaUxDSmpjbllpT2lKUUxUSTFOaUlzSW5naU9pSmpNVm81TlU5blUyRnRNQzEwTTJKeFpqTklkbWRtZEdkcU1USnROVzVMT1dOTFgxQk5WVEUyWjJSWklpd2llU0k2SWs5VGRsbExaakprY2treGVYb3pSeTF5YjFOUmRVaDNYMnRzZEdFdFpEUndPSEZPUXpadlgyWklaRVVpZlgwLmV5SnBjM01pT2lKb2RIUndjem92TDNCeWIzUnZkSGx3WlMxc2IyMXBibTh0YVhOemRXVnlMbUY2ZFhKbGQyVmljMmwwWlhNdWJtVjBMMjl3Wlc1cFpDOWtjbUZtZEY4eE5DSXNJbk4xWWlJNkltUnBaRHByWlhrNmVqSmtiWHBFT0RGaloxQjRPRlpyYVRkS1luVjFUVzFHV1hKWFVHZFpiM2wwZVd0VldqTmxlWEZvZERGcU9VdGljVU50VnpkNlZGSllXVkJsV1ZaQmVsSmxRbUZWYjBKRGNqTnBOelExV2pOV1pHOWFORzUyZFVoalVXTTRXR1pRT1VOUlRuRlhjVWhDYldGMGIzRlpaVlE0UlZaa1pIQlpaM3B4YTNKa1ZtOVFiVkptYTFSNVZIWnFkRlpHVjBOTmVYQlhVbE5SZW5ZNFpuRmhRek5DY25SMVJISjBjVE5XTXpaeFRqUjVjbXBrWlNJc0luWmpJanA3SW5SNWNHVWlPbHNpVm1WeWFXWnBZV0pzWlVOeVpXUmxiblJwWVd3aUxDSjJhWFJ1WlcxaGJDSmRMQ0pqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKcFpDSTZJbVJwWkRwclpYazZlakprYlhwRU9ERmpaMUI0T0ZacmFUZEtZblYxVFcxR1dYSlhVR2RaYjNsMGVXdFZXak5sZVhGb2RERnFPVXRpY1VOdFZ6ZDZWRkpZV1ZCbFdWWkJlbEpsUW1GVmIwSkRjak5wTnpRMVdqTldaRzlhTkc1MmRVaGpVV000V0daUU9VTlJUbkZYY1VoQ2JXRjBiM0ZaWlZRNFJWWmtaSEJaWjNweGEzSmtWbTlRYlZKbWExUjVWSFpxZEZaR1YwTk5lWEJYVWxOUmVuWTRabkZoUXpOQ2NuUjFSSEowY1ROV016WnhUalI1Y21wa1pTSXNJbDl6WkNJNld5SlVlRmRZZWpZMWVXbDRWRGxXUjFOb1lUTnlOVkJ3WkRWdFYzRk9SR1ZwVTNsd1NUaERWMWxIWkdOcklpd2llbFZLWmtaV1FXOWhZM2cwZVZaaVIybzRVVWREZHpSTGVGTkRNell0VVdWYU4xcEVhWFJaY1dOUU1DSXNJbmRTVW5sQmJtSjVaQzFOVW1KdFNpMXRTSHBYWm5kUWVHRkthSEExTVhwM1FXOXBhbWhoYTE5TFpsVWlMQ0psVm10a1MzSkVZVlJHZVdsVWRqTXpkVkpCZEhGb1ZERmhNRVJOU25SRFowVmpOV1ExY21GTVNXOXZJaXdpVlRScFJEbHRhbGREVTNOdU5HUmFOSGM0TTBoUFprNUpVRVoyYWxkRFVWOTJlVkZQV2xVMFNYWTRPQ0lzSWpOcmVXTjJUVkJtVTFSNVVrcHVia2cxTlVWd1kwWnlhV3M1T1ZsaFp6SnZPVFZqTTJKcFIyZHVTbThpTENKbVdrbExWR05wZGtWWE1VOXVZVzVFU2pnMFltaG5jRVJ4TFRWUlEyWnlRMmhmYUU0NGFGbHpPVXhOSWl3aVdFUnBTalo2ZW5FMVZHVnhVRFp2TlRSd1RVdElWbkpITXpOR1gwOUljMWhZWkUxUU1raG1UbEpzZHlJc0lrRk5URWgxZWtwc1VEWmFkVFp4V0Zad1kxZHpkMUppTVhsblkxWnBkemN5UkdZeGJXeGZOWGR5UkdzaVhYMHNJbWxrSWpvaWRYSnVPblYxYVdRNk1XSm1PRFUwWmpNdFptSXpOaTAwWW1Ka0xUazNaamd0TnpFeFpqVmtNV015TldZMElpd2lhWE56ZFdWeUlqcDdJbWxrSWpvaVpHbGtPbmRsWWpwd2NtOTBiM1I1Y0dVdGJHOXRhVzV2TFdsemMzVmxjaTVoZW5WeVpYZGxZbk5wZEdWekxtNWxkRHBrWVRCaVkyRXhaQ0lzSW01aGJXVWlPaUpDWVdOb1pXeHZjbkJ5YjNOcVpXdDBJbjBzSW5aaGJHbGtSbkp2YlNJNklqSXdNalV0TURNdE1EUlVNRGc2TXpnNk5EVXVOemt5TURreE5EVXlXaUlzSW5aaGJHbGtWVzUwYVd3aU9pSXlNREkxTFRBekxUQTJWREE0T2pNNE9qUTFMamM1TWpFd01qYzFNbG9pTENKamNtVmtaVzUwYVdGc1FuSmhibVJwYm1jaU9uc2lZbUZqYTJkeWIzVnVaRU52Ykc5eUlqb2lJekZrTXpWaU5TSXNJbXh2WjI5VmNtd2lPaUpvZEhSd2N6b3ZMMlY0WVcxd2JHVXVZMjl0TDJ4dloyOHVjRzVuSW4wc0ltNWhiV1VpT2lKV2FYUnVaVzFoYkNJc0ltUmxjMk55YVhCMGFXOXVJam9pWkdsbmRHRnNkbWwwYm1WdFlXd2lmU3dpWTI1bUlqcDdJbXAzYXlJNmV5SnJkSGtpT2lKRlF5SXNJbU55ZGlJNklsQXRNalUySWl3aWVDSTZJbU14V2prMVQyZFRZVzB3TFhRelluRm1NMGgyWjJaMFoyb3hNbTAxYmtzNVkwdGZVRTFWTVRablpGa2lMQ0o1SWpvaVQxTjJXVXRtTW1SeVNURjVlak5ITFhKdlUxRjFTSGRmYTJ4MFlTMWtOSEE0Y1U1RE5tOWZaa2hrUlNKOWZYMC5FbE1pTks4MV80cUx4YnJMa0pvbEpyMFZlSFllTmRRdWNneUVCVTdCVEpQVzdDMkV6N09jRk8wR0JrdmtsUjBqUHl5Z2FXYW5QRFlaQVRPcTF1dVczUSJdfX0.iTaGhHJ6f0lkx6ZbcBHV7bSZ5BNs7Nkn9PW7ea4eGmjcQ3NH8NYxNEfXlu-yFq4N61ypZxqRhUAnS5fuuO7KGA";
    private final ResponseService responseService;
    String test2 ="state=9b29cf6d-bd6d-42a7-b132-20bda314ce96&vp_token=eyJqd2siOnsieCI6IkJFMjBKU09sM2Vua1k2Ujd2R1FwUGpreFpQdEdTeGc4NUJLa2c5V1ZGcUUiLCJ5IjoickJMQ0NnRW5XMHVQczA3TmFhTFhqUlJnSmxpOHV5SXJDNnFwOS1odHZnSTgiLCJjcnYiOiJQLTI1NiIsImt0eSI6IkVDIn0sImFsZyI6IkVTMjU2IiwidHlwIjoiSldUIiwia2lkIjoiZGlkOmtleTp6MmRtekQ4MWNnUHg4VmtpN0pidXVNbUZZcldQZ1lveXR5a1VaM2V5cWh0MWo5S2JxQ21XN3pUUlhZUGVZVkF6UmVCYVVvQkNyM2k3NDVaM1Zkb1o0bnZ1SGNRYzhYZlA5Q1FOcVdxSEJtYXRvcVllVDhFVmRkcFlnenFrcmRWb1BtUmZrVHlUdmp0VkZXQ015cFdSU1F6djhmcWFDM0JydHVEcnRxM1YzNnFONHlyamRlI3oyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnFDbVc3elRSWFlQZVlWQXpSZUJhVW9CQ3IzaTc0NVozVmRvWjRudnVIY1FjOFhmUDlDUU5xV3FIQm1hdG9xWWVUOEVWZGRwWWd6cWtyZFZvUG1SZmtUeVR2anRWRldDTXlwV1JTUXp2OGZxYUMzQnJ0dURydHEzVjM2cU40eXJqZGUifQ.eyJ2cCI6eyJAY29udGV4dCI6WyJodHRwczovL3d3dy53My5vcmcvMjAxOC9jcmVkZW50aWFscy92MSJdLCJ2ZXJpZmlhYmxlQ3JlZGVudGlhbCI6WyJleUpyYVdRaU9pSXlVRUpOYldZeGMyVkVhREV6YURSUGRYaHNkRjlRVmtJMVpYRTFkVmMyYVhaclkyRkdlR1JWTm5GTklpd2lkSGx3SWpvaVNsZFVJaXdpWVd4bklqb2lSVk15TlRZaUxDSnFkMnNpT25zaWEzUjVJam9pUlVNaUxDSmpjbllpT2lKUUxUSTFOaUlzSW5naU9pSmpNVm81TlU5blUyRnRNQzEwTTJKeFpqTklkbWRtZEdkcU1USnROVzVMT1dOTFgxQk5WVEUyWjJSWklpd2llU0k2SWs5VGRsbExaakprY2treGVYb3pSeTF5YjFOUmRVaDNYMnRzZEdFdFpEUndPSEZPUXpadlgyWklaRVVpZlgwLmV5SnBjM01pT2lKb2RIUndjem92TDNCeWIzUnZkSGx3WlMxc2IyMXBibTh0YVhOemRXVnlMbUY2ZFhKbGQyVmljMmwwWlhNdWJtVjBMMjl3Wlc1cFpDOWtjbUZtZEY4eE5DSXNJbk4xWWlJNkltUnBaRHByWlhrNmVqSmtiWHBFT0RGaloxQjRPRlpyYVRkS1luVjFUVzFHV1hKWFVHZFpiM2wwZVd0VldqTmxlWEZvZERGcU9VdGljVU50VnpkNlZGSllXVkJsV1ZaQmVsSmxRbUZWYjBKRGNqTnBOelExV2pOV1pHOWFORzUyZFVoalVXTTRXR1pRT1VOUlRuRlhjVWhDYldGMGIzRlpaVlE0UlZaa1pIQlpaM3B4YTNKa1ZtOVFiVkptYTFSNVZIWnFkRlpHVjBOTmVYQlhVbE5SZW5ZNFpuRmhRek5DY25SMVJISjBjVE5XTXpaeFRqUjVjbXBrWlNJc0luWmpJanA3SW5SNWNHVWlPbHNpVm1WeWFXWnBZV0pzWlVOeVpXUmxiblJwWVd3aUxDSjJhWFJ1WlcxaGJDSmRMQ0pqY21Wa1pXNTBhV0ZzVTNWaWFtVmpkQ0k2ZXlKcFpDSTZJbVJwWkRwclpYazZlakprYlhwRU9ERmpaMUI0T0ZacmFUZEtZblYxVFcxR1dYSlhVR2RaYjNsMGVXdFZXak5sZVhGb2RERnFPVXRpY1VOdFZ6ZDZWRkpZV1ZCbFdWWkJlbEpsUW1GVmIwSkRjak5wTnpRMVdqTldaRzlhTkc1MmRVaGpVV000V0daUU9VTlJUbkZYY1VoQ2JXRjBiM0ZaWlZRNFJWWmtaSEJaWjNweGEzSmtWbTlRYlZKbWExUjVWSFpxZEZaR1YwTk5lWEJYVWxOUmVuWTRabkZoUXpOQ2NuUjFSSEowY1ROV016WnhUalI1Y21wa1pTSXNJbDl6WkNJNld5SlVlRmRZZWpZMWVXbDRWRGxXUjFOb1lUTnlOVkJ3WkRWdFYzRk9SR1ZwVTNsd1NUaERWMWxIWkdOcklpd2llbFZLWmtaV1FXOWhZM2cwZVZaaVIybzRVVWREZHpSTGVGTkRNell0VVdWYU4xcEVhWFJaY1dOUU1DSXNJbmRTVW5sQmJtSjVaQzFOVW1KdFNpMXRTSHBYWm5kUWVHRkthSEExTVhwM1FXOXBhbWhoYTE5TFpsVWlMQ0psVm10a1MzSkVZVlJHZVdsVWRqTXpkVkpCZEhGb1ZERmhNRVJOU25SRFowVmpOV1ExY21GTVNXOXZJaXdpVlRScFJEbHRhbGREVTNOdU5HUmFOSGM0TTBoUFprNUpVRVoyYWxkRFVWOTJlVkZQV2xVMFNYWTRPQ0lzSWpOcmVXTjJUVkJtVTFSNVVrcHVia2cxTlVWd1kwWnlhV3M1T1ZsaFp6SnZPVFZqTTJKcFIyZHVTbThpTENKbVdrbExWR05wZGtWWE1VOXVZVzVFU2pnMFltaG5jRVJ4TFRWUlEyWnlRMmhmYUU0NGFGbHpPVXhOSWl3aVdFUnBTalo2ZW5FMVZHVnhVRFp2TlRSd1RVdElWbkpITXpOR1gwOUljMWhZWkUxUU1raG1UbEpzZHlJc0lrRk5URWgxZWtwc1VEWmFkVFp4V0Zad1kxZHpkMUppTVhsblkxWnBkemN5UkdZeGJXeGZOWGR5UkdzaVhYMHNJbWxrSWpvaWRYSnVPblYxYVdRNk1XSm1PRFUwWmpNdFptSXpOaTAwWW1Ka0xUazNaamd0TnpFeFpqVmtNV015TldZMElpd2lhWE56ZFdWeUlqcDdJbWxrSWpvaVpHbGtPbmRsWWpwd2NtOTBiM1I1Y0dVdGJHOXRhVzV2TFdsemMzVmxjaTVoZW5WeVpYZGxZbk5wZEdWekxtNWxkRHBrWVRCaVkyRXhaQ0lzSW01aGJXVWlPaUpDWVdOb1pXeHZjbkJ5YjNOcVpXdDBJbjBzSW5aaGJHbGtSbkp2YlNJNklqSXdNalV0TURNdE1EUlVNRGc2TXpnNk5EVXVOemt5TURreE5EVXlXaUlzSW5aaGJHbGtWVzUwYVd3aU9pSXlNREkxTFRBekxUQTJWREE0T2pNNE9qUTFMamM1TWpFd01qYzFNbG9pTENKamNtVmtaVzUwYVdGc1FuSmhibVJwYm1jaU9uc2lZbUZqYTJkeWIzVnVaRU52Ykc5eUlqb2lJekZrTXpWaU5TSXNJbXh2WjI5VmNtd2lPaUpvZEhSd2N6b3ZMMlY0WVcxd2JHVXVZMjl0TDJ4dloyOHVjRzVuSW4wc0ltNWhiV1VpT2lKV2FYUnVaVzFoYkNJc0ltUmxjMk55YVhCMGFXOXVJam9pWkdsbmRHRnNkbWwwYm1WdFlXd2lmU3dpWTI1bUlqcDdJbXAzYXlJNmV5SnJkSGtpT2lKRlF5SXNJbU55ZGlJNklsQXRNalUySWl3aWVDSTZJbU14V2prMVQyZFRZVzB3TFhRelluRm1NMGgyWjJaMFoyb3hNbTAxYmtzNVkwdGZVRTFWTVRablpGa2lMQ0o1SWpvaVQxTjJXVXRtTW1SeVNURjVlak5ITFhKdlUxRjFTSGRmYTJ4MFlTMWtOSEE0Y1U1RE5tOWZaa2hrUlNKOWZYMC5FbE1pTks4MV80cUx4YnJMa0pvbEpyMFZlSFllTmRRdWNneUVCVTdCVEpQVzdDMkV6N09jRk8wR0JrdmtsUjBqUHl5Z2FXYW5QRFlaQVRPcTF1dVczUSJdLCJob2xkZXIiOiJkaWQ6a2V5OnoyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnFDbVc3elRSWFlQZVlWQXpSZUJhVW9CQ3IzaTc0NVozVmRvWjRudnVIY1FjOFhmUDlDUU5xV3FIQm1hdG9xWWVUOEVWZGRwWWd6cWtyZFZvUG1SZmtUeVR2anRWRldDTXlwV1JTUXp2OGZxYUMzQnJ0dURydHEzVjM2cU40eXJqZGUiLCJpZCI6InVybjp1dWlkOkRFRkRBNTlELTdDODQtNEFDMy04MURDLTFEQ0QwNDY4MDczQiIsInR5cGUiOlsiVmVyaWZpYWJsZVByZXNlbnRhdGlvbiJdfSwiaWF0IjoxNzQxMjU5MTM0LCJqdGkiOiJ1cm46dXVpZDpERUZEQTU5RC03Qzg0LTRBQzMtODFEQy0xRENEMDQ2ODA3M0IiLCJhdWQiOiJodHRwczovL2Rldi1iZXZpc2lubmhlbnRlci5henVyZXdlYnNpdGVzLm5ldCIsImV4cCI6MTc0MTI2MjczNCwibm9uY2UiOiIxY2VmOWIyZS1kYTJmLTRiNmQtYjI1ZS05ZGI1MDM2MjdmZjgiLCJpc3MiOiJkaWQ6a2V5OnoyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnFDbVc3elRSWFlQZVlWQXpSZUJhVW9CQ3IzaTc0NVozVmRvWjRudnVIY1FjOFhmUDlDUU5xV3FIQm1hdG9xWWVUOEVWZGRwWWd6cWtyZFZvUG1SZmtUeVR2anRWRldDTXlwV1JTUXp2OGZxYUMzQnJ0dURydHEzVjM2cU40eXJqZGUiLCJzdWIiOiJkaWQ6a2V5OnoyZG16RDgxY2dQeDhWa2k3SmJ1dU1tRllyV1BnWW95dHlrVVozZXlxaHQxajlLYnFDbVc3elRSWFlQZVlWQXpSZUJhVW9CQ3IzaTc0NVozVmRvWjRudnVIY1FjOFhmUDlDUU5xV3FIQm1hdG9xWWVUOEVWZGRwWWd6cWtyZFZvUG1SZmtUeVR2anRWRldDTXlwV1JTUXp2OGZxYUMzQnJ0dURydHEzVjM2cU40eXJqZGUiLCJuYmYiOjE3NDEyNTkxMzR9.1wYZ3LSDHcApceVZzVXaYl5QFVRIEEokC3MWpEc17xyf3VzIrnef82swS6BKYsC4FPkV07DAgWhEizfKuYZbdA&presentation_submission=%7B%22descriptor_map%22%3A%5B%7B%22path%22%3A%22%24%22%2C%22id%22%3A%22cd86c273-504b-42b6-a242-f20d0568a85a%22%2C%22path_nested%22%3A%7B%22id%22%3A%22cd86c273-504b-42b6-a242-f20d0568a85a%22%2C%22path%22%3A%22%24.vp.verifiableCredential%5B0%5D%22%2C%22format%22%3A%22jwt_vc%22%7D%2C%22format%22%3A%22%22%7D%5D%2C%22id%22%3A%2236D1F655-3F53-46C6-A426-B73A9D70A790%22%2C%22definition_id%22%3A%22d8ec6368-82fe-4f91-94b1-cea0d16fc0e5%22%7D";

    @Autowired
    public ResponseController(ResponseService responseService){
        this.responseService = responseService;
    }

    @PostMapping("/callback")
    public String callBack(@RequestBody String requestBody){
        test = requestBody;
        return "Successfully";
    }

    @GetMapping("/testerCallbacken")
    public String getTestValue() {
        return test;
    }

    @GetMapping("/token")
    public String getToken() {
        return responseService.getJustToken(test2);
    }

    @GetMapping("/token1")
    public String getToken1(){
        return responseService.getToken1(test2);
    }

    @GetMapping("/token2")
    public String getToken2(){
        return responseService.getToken2(test2);
    }

    @GetMapping("/tokenHead")
    public String getTokenHead() {
        try {
            return responseService.getTokenHeader(test2);
        } catch (Exception e) {
            return "Feil ved henting av token header: \"" + e;
        }
    }

    @GetMapping("/tokenPayload")
    public String getTokenPayloaden() {
        try {
            return responseService.getTokenPayload(test2);
        } catch (Exception e) {
            return "Feil ved henting av token header: \"" + e;
        }
    }

    @GetMapping("/extractedToken")
    public String getExtractedToken(){
        try {
            return responseService.extractToken(responseService.getTokenPayload(test2));
        } catch (Exception e) {
            return "Feil ved henting av token header: \"" + e;
        }
    }

    @GetMapping("/extracedToken2")
    public String getExtractedToken2(){

        String token = responseService.extractToken(responseService.getTokenPayload(test2));
        try {
            return responseService.getTokenPayload2(token);
        } catch (Exception e) {
            return "Feil ved henting av token header: \"" + e;
        }
    }

    @GetMapping("/extracedSd")
    public List<String> getExtractedSd(){

        String JSON  = responseService.getTokenPayload2(responseService.extractToken(responseService.getTokenPayload(test2)));
        try {
            return ResponseService.extractSd(JSON);
        } catch (Exception e) {
            return Collections.singletonList("Feil ved henting av token header: \"" + e);
        }
    }

    @GetMapping("/test")
    public String testEnEd() {
        try {
            return responseService.encrypt();
        } catch (NullPointerException e) {
            return "Feil: responseService eller input er null!";
        } catch (SecurityException e) {
            return "Feil: Krypteringsfeil - sikkerhetsproblem!";
        } catch (Exception e) {
            return "Feil: Uventet feil oppstod under kryptering: " + e.getMessage();
        }
    }






}
